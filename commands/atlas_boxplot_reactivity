#!/Users/hyu/anaconda3/envs/Mapping/bin/python
# -*- coding: utf-8 -*-

import math,argparse,gzip,sys,os
from rich.console import Console
from rich.text import Text


def boxplot_norm(plus,minus,cap=2,cpn=1,minACN=10,minMinus=30):
    plusCount=[int(p) for p in plus]
    minusCount=[int(m) for m in minus]
    if (
        (sum(plusCount)/len(plusCount)<cpn) or
        (sum(minusCount)/len(minusCount)<cpn)
        ):
        return "NA"
    for i in range(len(plusCount)):
        plusCount[i]=math.log10(plusCount[i]+1)
        minusCount[i]=math.log10(minusCount[i]+1)

    plusAve=sum(plusCount)/len(plusCount)
    minusAve=sum(minusCount)/len(minusCount)
    alpha=min(1,plusAve/minusAve)
    
    accepted=[]
    reacPlusMinus=[ -999 for i in range(len(plusCount))]
    for i in range(len(plusCount)):
        tvalue=plusCount[i]/plusAve-alpha*minusCount[i]/minusAve
        if (tvalue>0):
            accepted.append(tvalue)
            reacPlusMinus[i]=tvalue
            continue
        if (minusCount[i]>minMinus):
            reacPlusMinus[i]=0

    if (len(accepted)<minACN):
        return "NA"
    accepted=sorted(accepted,reverse=True)
    outlier=(accepted[int(len(accepted)*0.25)-1]-accepted[int(len(accepted)*0.75)-1])*1.5+accepted[int(len(accepted)*0.25)-1]
    tarRegBeg=-1
    for i in range(len(accepted)):
        if (accepted[i]<outlier):
            tarRegBeg=i
            break
    aveValue=sum(accepted[tarRegBeg:(tarRegBeg+int(len(accepted)*0.1))])/int(len(accepted)*0.1)
    if (aveValue==0):
        return "NA"
    react=[]
    for i in range(1,len(reacPlusMinus)):
        if (reacPlusMinus[i] == -999):
            react.append("-999")
            continue
        tvalue=min(reacPlusMinus[i]/aveValue,cap)
        react.append(str(tvalue))
    react.append("-999")
    return react

def Calculate_SHAPE_Reactivity(plusfile, minusfile, outfile, cap, cpn, minACN, minMinus):
    plus = {}
    print("Collect " + plusfile)
    with gzip.open(plusfile, "rt", encoding="utf8") as f:
        for line in f:
            tmp = line.strip().split("\t")
            trt = tmp[1].split(",")
            trt = [int(t) for t in trt]
            plus[tmp[0]] = trt

    minus = {}
    print("Collect " + minusfile)
    with gzip.open(minusfile, "rt", encoding="utf8") as f:
        for line in f:
            tmp = line.strip().split("\t")
            trt = tmp[1].split(",")
            trt = [int(t) for t in trt]
            minus[tmp[0]] = trt

    print("Len plus: " + str(len(plus)))
    print("Len minus: " + str(len(minus)))
    print("Calculate SHAPE Reactivity")
    with open(outfile, "w") as out:
        for gene in plus:
            if gene in minus:
                reac = boxplot_norm(plus[gene], minus[gene], cap, cpn, minACN, minMinus)
                out.write("\t".join([
                    gene,
                    ",".join(reac)
                ]) + "\n")

def load_logo(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return Text(f.read(), style="bold white")
    return Text("Logo file not found.", style="bold red")

if __name__ == "__main__":

    # logo_path = os.path.expanduser("~/.atlaslogo")
    # logo = textwrap.dedent(load_logo(logo_path)).strip()

    parser = argparse.ArgumentParser(description="Calculate SHAPE Reactivity")
    parser.add_argument("-p", "--plus", required=True, help="Plus file")
    parser.add_argument("-m", "--minus", required=True, help="Minus file")
    parser.add_argument("-o", "--outfield", required=True, help="Output field")
    parser.add_argument("--cap", type=float, default=2, help="Cap value, default is 2")
    parser.add_argument("--cpn", type=float, default=1, help="Count per nt, default is 1")
    parser.add_argument("--minACN", type=int, default=10, help="Min Accepted Number, default is 10")
    parser.add_argument("--minMinus", type=int, default=30, help="Min Minus, default is 30")
    args = parser.parse_args()

    Calculate_SHAPE_Reactivity(args.plus, args.minus, args.outfield, args.cap, args.cpn, args.minACN, args.minMinus)