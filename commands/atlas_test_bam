#!/Users/hyu/Intel_miniforge3/envs/PYSAM/bin/python
# -*- coding: utf-8 -*-

import os,pysam
import argparse

def check_bam_file(input_bam):
    if not os.path.exists(input_bam):
        print("File not found: ", input_bam)
        return False

    try:
        with pysam.AlignmentFile(input_bam, "rb") as bam_file:
            print(input_bam, " is a valid BAM file")
    except ValueError:
        print(input_bam, " is not a valid BAM file")
        return False
    
    if not os.path.exists(input_bam+".bai"):
        print(input_bam, " is not indexed, creating index...")
        try:
            pysam.index(input_bam)
            print("Index created successfully")
        except Exception as e:
            print(f"Error creating index: {e}")
            return False
    else:
        print(input_bam, " is indexed")
    return True

def main(input_bam):
    if not check_bam_file(input_bam):
        return False

    print("Testing mapping rate and strandness...")

    print()
    bamfile=pysam.AlignmentFile(input_bam, "rb")
    
    limit=100000
    all_reads=0
    unmapped_count=0
    forward_count=0
    reverse_count=0

    for i in range(bamfile.nreferences):
        tname=bamfile.get_reference_name(i)
        if (bamfile.count(tname)==0):
            continue
        if (all_reads>limit):
            break
        for read in bamfile.fetch(tname):
            all_reads+=1
            if (read.is_unmapped):
                unmapped_count+=1
                continue
            if read.is_read1 == read.is_reverse:
                reverse_count+=1
            else:
                forward_count+=1

    print("-" * 50)  
    print("Tested reads: {}".format(all_reads))
    print("Mapping rate: {:.2f}%".format((all_reads - unmapped_count) / all_reads * 100))
    print("Forward reads: {} Ratio: {:.2f}%".format(forward_count, (forward_count / all_reads * 100)))
    print("Reverse reads: {} Ratio: {:.2f}%".format(reverse_count, (reverse_count / all_reads * 100)))
    print("-" * 50)
            
if __name__=="__main__":

    logo='''      
          _   _             ____  _       _        __      
     /\  | | | |           |  _ \(_)     (_)      / _|     
    /  \ | |_| | __ _ ___  | |_) |_  ___  _ _ __ | |_ ___  
   / /\ \| __| |/ _` / __| |  _ <| |/ _ \| | '_ \|  _/ _ \ 
  / ____ \ |_| | (_| \__ \ | |_) | | (_) | | | | | || (_) |
 /_/    \_\__|_|\__,_|___/ |____/|_|\___/|_|_| |_|_| \___/  

        `-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"
        `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/
            y==/        y==/        y==/        y==/
        ,=,-<=`.    ,=,-<=`.    ,=,-<=`.    ,=,-<=`.
        ,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_,-'-'   `-=_
                
    '''


    description_text = '''{} 
        "atlas_test_bam" is a tool to test the mapping rate and the strandness of the input BAM file. '''.format(logo)

    parser = argparse.ArgumentParser(description=description_text, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('input_bam', type=str, help='Path to the input indexed BAM file.')
    
    args = parser.parse_args()
    main(args.input_bam)