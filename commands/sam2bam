import os
import subprocess
import argparse
import logging
import concurrent.futures

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def run_command(command):
    tfile=os.path.basename(command.split(" ")[-1])
    logging.info(f"Starting sort: {tfile}")
    result = subprocess.run(command, shell=True)
    logging.info(f"Finished sort: {tfile}")
    return result.stdout if result.stdout else result.stderr

def sam2bam(samtools_path,threads=8):
    commands = []
    for file in os.listdir("./"):
        if not file.lower().endswith(".sam"):
            continue
        sam_file = file
        bam_file = file.replace(".sam", ".sort.bam")
        commands.append(f"{samtools_path} view -h {sam_file} | {samtools_path} sort -o {bam_file}")
    
    if len(commands) == 0:
        logging.error("No SAM files found.")
        return
    
    logging.info(f"Converting {len(commands)} SAM files to BAM files.")
    logging.info(f"Using {threads} threads.")

    with concurrent.futures.ProcessPoolExecutor(max_workers=threads) as executor:
        futures = {executor.submit(run_command, cmd): cmd for cmd in commands}
        

def main():
    parser = argparse.ArgumentParser(description='Convert SAM to BAM')
    parser.add_argument('-s', '--samtools_path', type=str, required=True, help='SAMtools path')
    parser.add_argument('-t', '--threads', type=int, default=8, help='Number of threads to use')
    args = parser.parse_args()
    sam2bam(args.samtools_path)

if __name__ == "__main__":
    main()
