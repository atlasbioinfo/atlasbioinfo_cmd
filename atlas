#!/Users/hyu/miniforge3/bin/python

import argparse,argcomplete
import json
import subprocess
from pathlib import Path

logo = '''      
              atlas  
    '''

env_args = {
        "samtools":"/Users/hyu/Intel_miniforge3/envs/MAPPING/bin/samtools",
        "general": "/Users/hyu/miniforge3/bin/python",
        "map": "/Users/hyu/Intel_miniforge3/envs/MAPPING/bin/python",
        "bmap": "/Users/hyu/Intel_miniforge3/envs/BOWTIE2/bin/python"
    }

def main():

    args=generate_parser()

    if args.command == 'sam2bam':
        run_sam2bam(args.samtools, args.threads)

    if args.command == 'bamindex':
        run_bamindex(args.samtools)

    if args.command == 'check_big_file':
        check_big_file(args.size, args.compress)

def generate_parser():
    parser = argparse.ArgumentParser(description='Atlas: A wrapper for utility commands.')
    subparsers = parser.add_subparsers(dest='command')

    check_big_file_parser = subparsers.add_parser('check_big_file', help='''
        This script is used to check the size of all files in a directory.
        If the file size is larger than 100MB, it will be printed out.
        -z to compress the output file.
        .''')
    check_big_file_parser.add_argument('-s', '--size', type=int, default=100, help='File size threshold in MB, default is 100MB')
    check_big_file_parser.add_argument('-z', '--compress', action='store_true', help='Compress the file')
    check_big_file_parser.set_defaults(func=check_big_file)

    bamindex_parser=subparsers.add_parser('bamindex', help='''
        scan folder and index bam file.
    ''')
    bamindex_parser.add_argument('-s', '--samtools', type=str, default=env_args['samtools'], help='Path to samtools')


    sam2bam_parser=subparsers.add_parser('sam2bam', help='''
        scan folder and convert sam to bam file.
    ''')
    sam2bam_parser.add_argument('-s', '--samtools', type=str, default=env_args['samtools'], help='Path to samtools')
    sam2bam_parser.add_argument('-t', '--threads', type=int, default=8, help='Number of threads to use')
    argcomplete.autocomplete(parser)

    return parser.parse_args()

def run_sam2bam(samtools_path, threads):
    script_path = Path(__file__).parent / 'commands' / 'sam2bam'
    command = ["python",str(script_path), '-s', samtools_path, '-t', str(threads)]
    subprocess.run(command)

def check_big_file(size, compress):
    script_path = Path(__file__).parent / 'commands' / 'atlas_check_big_file.py'
    command = ["python", str(script_path), '-s', str(size)]
    if compress:
        command.append('-z')
    subprocess.run(command)

def run_bamindex(samtools_path):
    script_path = Path(__file__).parent / 'commands' / 'atlas_bam_index'
    command = ["python", str(script_path), '-s', samtools_path]
    subprocess.run(command)

def run_ls_command():
    subprocess.run(['ls', '-lsht', '--color=always'])

if __name__ == '__main__':
    main()
